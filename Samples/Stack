//Bounded Stack

class Stack<T> { // bounded

	private T[] seq; // the sequence
	private int size = 0; // size of sequence
	
	Stack(int n) { // n>0
		seq = (T[])(new Object[n]);
	}

	Stack() { this(10000); }

	boolean isEmpty() { return size==0;}

	boolean push(T t) { 
		if (size<seq.length) {
				seq[size] = t; size++; return true;
		}
		else return false;
	}
	
	T pop() {
		if (isEmpty()) return null;
		else {
			size--; return seq[size];
		}
	}
}


//Unbounded Stack

class Stack<T>{
  private T[]seq = (T[])(new object[1]);
  private int size = 0;
  
  boolean isEmpty(){
    return(size==0);
  }
  
  boolean push(T item){
    if(size==seq.length){
      T[] newSeq (T[])(new object[size*2]);
      for(int i = 0; i< seq.length; i++){
        newSeq[i] = seq[i];
      }
      seq[size] = item;
      size++;
      return true;
  }
  
  T pop(){
    if(isEmpty())
      return null;
    }else{
      size--;
      return seq[size];
    }
  }
}
